//Program of Insertion Sort
#include<stdio.h>
#include<conio.h>
 
void readarray(int a[50],int n)
 {
 int i;
 printf("\nEnter elements of an array.....\n");
 for(i=0;i<n;i++)
 {
 printf("enter value a[%d] = ",i);
 scanf("%d",&a[i]);
 }
 }
 
void insertionsort(int a[50],int n)
 {
 int i,curr,key;
 for(i=1;i<n;i++)
 {
 key = a[i];
 for(curr = i-1; (curr >= 0)&& (a[curr] > key); curr--)
 {
 a[curr+1] = a[curr];
 }
 a[curr+1] = key;
 }
 }
 
void printarray(int a[50],int n)
 {
 int i;
 for(i=0;i<n;i++)
 printf("a[%d] = %d\n",i,a[i]);
 printf("\n");
 }
void main()
 {
 int x[50],n;
 clrscr();
 printf(" * * * * * INSERTION SORT * * * * * \n\n");
 printf("Enter no. of elements to be sorted : ");
 scanf("%d",&n);
 readarray(x,n);
 insertionsort(x,n);
 printf("Sorted elements using insertion sort.....\n");
 printarray(x,n);
 getch();
 }


//Program of Quick Sort
#include<stdio.h>
#include<conio.h>
void quicksort(int a[50],int low ,int high)
{
 int p;
 if(low<high)
 {
 p=partition(a,low,high);
 quicksort(a,low,p-1);
 quicksort(a,p+1,high);
 }
}
void readarray(int A[],int n)
{
 int i;
 for(i=0;i<n;i++)
 {
 printf("Enter value of A[%d] = ",i);
 scanf("%d",&A[i]);
 }
}
void display(int A[],int n)
{
 int i;
 for(i=0;i<n;i++)
 {
 printf("A[%d] = %d\n",i,A[i]);
 }
}
int partition(int a[50],int lb,int ub)
{
 int key,temp,i,j;
 i=lb;
 j=ub;
 key=a[lb];
 while(i<j)
 {
 i++;
 while((i<=ub)&&(a[i]<key))
 i++;
 while((j>=lb)&&(a[j]>key))
 j--;
 if(i<j)
 {
temp=a[i];
a[i]=a[j];
a[j]=temp;
 }
 }
 a[lb]=a[j];
 a[j]=key;
 return j;
}


//Program of Merge Sort
#include<stdio.h>
#include<conio.h>
void merge(int A[50],int low,int mid,int high)
{
int aux[50],i,j,k;
k = low;
i = low;
j = mid+1;
if(low<high)
{
 while((i<=mid) && (j<=high))
 {
 if(A[i]<A[j])
 aux[k++] = A[i++];
 else
 aux[k++] = A[j++];
 }
 while(i<=mid)
 aux[k++] = A[i++];
 while(j<=high)
 aux[k++] = A[j++];
 for(i=low;i<=high;i++)
 {
 A[i] = aux[i];
 printf("%d ",A[i]);
 }
 printf("\n");
}
}
void mergesort(int A[50],int low,int high)
{
int mid;
if(low<high)
{
mid=(low+high)/2;
mergesort(A,low,mid);
mergesort(A,mid+1,high);
merge(A,low,mid,high);
}
}
void printlist(int A[], int n)
{
 int i;
 for(i=0;i<n;i++)
 printf("Element at X[%d] = %d\n",i,A[i]);
}
void readlist(int A[], int n)
{
 int i;
 for(i=0;i<n;i++)
 {
 printf("Enter element at X[%d] : ",i);
 scanf("%d",&A[i]);
 }
}
void main()
{
 int i,n,x[20];
 clrscr();
 printf("Enter number of elements : ");
 scanf("%d",&n);
 printf("Enter elements of an array.....\n");
 readlist(x,n);
 mergesort(x,0,n-1);
 printf("\nSorted list using Merge sort.....\n");
 printlist(x,n);
 getch();
}


Program Code:
// MAXMIN ALGORITHM
#include <stdio.h>
#include <stdlib.h>
void maxmin(int a[50], int low, int hi, int *fmax, int *fmin) {
int mid, hmax, hmin;
if (low == hi)
*fmax = *fmin = a[low];
else {
if (low == hi - 1) {
if (a[low] > a[hi]) {
*fmax = a[low];
*fmin = a[hi];
} else {
*fmax = a[hi];
*fmin = a[low];
}
} else {
mid = (low + hi) / 2;
maxmin(a, low, mid, &hmax, &hmin);
maxmin(a, mid + 1, hi, fmax, fmin);
*fmax = (hmax > *fmax) ? hmax : *fmax;
*fmin = (hmin < *fmin) ? hmin : *fmin;
}
}
}
int main() {
int i, n, a[50], max, min;
system("cls");
printf("Enter no. of elements in the array : ");
scanf("%d", &n);
printf("Enter the elements of the array ->\n");
for (i = 0; i < n; i++) {
printf("A[%d] : ", i);
scanf("%d", &a[i]);
}
maxmin(a, 0, n - 1, &max, &min);
printf("\nMaximim element in the array is : %d", max);
printf("\nMinimum element in the array is : %d", min);
getchar();
return 0;
}


Program Code:
// N-Queen problem
#include <stdio.h>
#include <stdlib.h>
int place(int x[10], int k) {
int i = 1, flag = 1;
while ((i <= k - 1) && (flag)) {
if ((x[i] == x[k]) || (abs(x[i] - x[k])) == abs(i - k))
flag = 0;
else
i++;
}
return flag;
}
void main() {
int k, i, x[10], count, n;
system("cls");
printf("Enter the number ofqueens : ");
scanf("%d", &n);
printf("Solutions for %d no ofqueens are.....\n", n);
count = 0;
k = 1;
x[k] = 0;
while (k > 0) {
x[k]++;
while ((x[k] <= n) && (!place(x, k)))
x[k]++;
if (x[k] <= n) {
if (k == n) {
count = count + 1;
for (i = 1; i <= n; i++)
printf("%d\t", x[i]);
printf("\n");
if (count % 5 == 0)
getchar();
} else {
k++;
x[k] = 0;
}
} else
k--;
}
printf("\nTotal no of solution = %d", count);
getchar();
}




//Program to implement KNAPSACK problem using Greedy method 
#include<stdio.h>
#include<conio.h>
void knapsack(int n, float weight[], float profit[], float capacity)
{
 float x[20],tp;
 int i,j,rcap;
 tp = 0;
 rcap = capacity;
 for (i = 0; i < n; i++)
 x[i] = 0.0;
 for (i = 0; i < n; i++)
 {
 if (weight[i] > rcap)
break;
 else
 {
x[i] = 1.0;
tp = tp + profit[i];
rcap = rcap - weight[i];
 }
 }
 if (i < n)
 x[i] = rcap / weight[i];
 tp = tp + (x[i] * profit[i]);
 
printf("\nThe result vector is = {");
 for (i=0; i<n-1; i++)
 printf("%0.2f, ",x[i]);
 printf("%0.2f}\n",x[i]);
 printf("\nMaximum profit is = %0.3f",tp);
}
void main()
{
 float weight[20], profit[20], ratio[20], capacity;
 int num,i,j;
 float temp;
 clrscr();
 printf("Enter the no. of items : ");
 scanf("%d",&num);
 printf("\nEnter the capacity of knapsack : ");
 scanf("%f",&capacity);
 printf("\nEnter the wights and profits of each object.....\n");
 for (i = 0; i < num; i++)
 {
 printf("Item no. %d : ",i+1);
 scanf("%f%f",&weight[i],&profit[i]);
 }
 for (i = 0; i < num; i++)
 ratio[i] = profit[i] / weight[i];
 for (i = 0; i < num; i++)
 for (j = i + 1; j < num; j++)
if (ratio[i] < ratio[j])
{
 temp = ratio[j];
 ratio[j] = ratio[i];
 ratio[i] = temp;
 temp = weight[j];
 weight[j] = weight[i];
 weight[i] = temp;
 temp = profit[j];
 profit[j] = profit[i];
 profit[i] = temp;
}
 knapsack(num, weight, profit, capacity);
 getch();
}




Program Code:
//NaÃ¯ve string-matching algorithm
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
void main() {
char st[100], pat[100];
int i, j, n, m, count, flag, pos;
system("cls");
printf("*** Naive String Matching Algorithm ***\n");
printf("Enter the String.\n");
gets(st);
printf("Enter the pattern to match.\n");
gets(pat);
n = strlen(st);
m = strlen(pat);
count = flag = pos = 0;
for (i = 0; i <= n - m; i++) {
pos++;
for (j = 0; j < m; j++) {
if (st[i + j] == pat[j])
count++;
}
if (count == m) {
flag = 1;
break;
}
count = 0;
}
if (flag == 0)
printf("\nNo match found");
else
printf("Match has been found on %d position.", pos);
getchar();
}



